using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Identity.Client;
using OxyPlot.Axes;
using OxyPlot.Series;
using OxyPlot;
using System.Collections.Concurrent;
using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Input;
using szakdolgozat.Models;
using szakdolgozat.Services;
using szakdolgozat.Views;
using System.Windows.Controls;

namespace szakdolgozat.ViewModels
{
    public class AssetVulnerabilityViewModel : BaseViewModel
    {
        private AssetVulnerability _selectedAssetVulnerability;

        private ChartExportService _chartExportService;

        public ObservableCollection<AssetVulnerability> AssetVulnerabilities { get; set; }

        public AssetVulnerability SelectedAssetVulnerability
        {
            get => _selectedAssetVulnerability;
            set
            {
                _selectedAssetVulnerability = value;
                OnPropertyChanged(nameof(SelectedAssetVulnerability));
            }
        }

        public ICommand AddVulnerabilityCommand { get; set; }
        public ICommand UpdateVulnerabilityCommand { get; set; }
        public ICommand DeleteVulnerabilityCommand { get; set; }
        public ICommand GenerateColumnChartCommand { get; }
        public ICommand GeneratePiechartCommand { get; }

        public AssetVulnerabilityViewModel()
        {
            LoadAssetVulnerabilities();

            _chartExportService = App.ServiceProvider.GetRequiredService<ChartExportService>();

            AddVulnerabilityCommand = new RelayCommand(AddVulnerability);
            UpdateVulnerabilityCommand = new RelayCommand(UpdateVulnerability, CanUpdateAssetVulnerability);
            DeleteVulnerabilityCommand = new RelayCommand(DeleteVulnerability, CanDeleteAssetVulnerability);
            GenerateColumnChartCommand = new RelayCommand(ShowColumnChartSelectionDialog);
            GeneratePiechartCommand = new RelayCommand(ShowPiechartSelectionDialog);
        }

        public async Task LoadAssetVulnerabilities()
        {
            using (var scope = App.ServiceProvider.CreateScope())
            {
                var context = scope.ServiceProvider.GetRequiredService<AssetDbContext>();
                var assetVulnerabilitiesList = await context.AssetVulnerabilities
                    .Include(av => av.Asset)
                    .Include(av => av.Vulnerability)
                    .Select(av => new AssetVulnerability
                    {
                        AssetID = av.AssetID,
                        VulnerabilityID = av.VulnerabilityID,
                        Probability = av.Probability,
                        Impact = av.Impact,
                        Action = av.Action,
                        Asset = av.Asset,
                        Vulnerability = av.Vulnerability
                    })
                    .ToListAsync();
                AssetVulnerabilities = new ObservableCollection<AssetVulnerability>(assetVulnerabilitiesList);
                OnPropertyChanged(nameof(AssetVulnerabilities));
            }
        }

        private async void AddVulnerability()
        {
            var viewModel = new AssetVulnerabilityDialogViewModel();
            var addAssetVulnerabilityWindow = new AssetVulnerabilityDialogView(viewModel);
            addAssetVulnerabilityWindow.Title = "Add Vulnerability";
            if (addAssetVulnerabilityWindow.ShowDialog() == true)
            {
                var newAssetVulnerability = viewModel.AssetVulnerability;
                using (var scope = App.ServiceProvider.CreateScope())
                {
                    var context = scope.ServiceProvider.GetRequiredService<AssetDbContext>();
                    if (newAssetVulnerability.Asset != null)
                    {
                        context.Assets.Attach(newAssetVulnerability.Asset);
                    }

                    if (newAssetVulnerability.Vulnerability != null)
                    {
                        context.Vulnerabilities.Attach(newAssetVulnerability.Vulnerability);
                    }

                    context.AssetVulnerabilities.Add(newAssetVulnerability);

                    await context.SaveChangesAsync();
                }
                AssetVulnerabilities.Add(newAssetVulnerability);
                OnPropertyChanged(nameof(AssetVulnerabilities));
            }
        }

        private bool CanUpdateAssetVulnerability()
        {
            return SelectedAssetVulnerability != null;
        }

        private async void UpdateVulnerability()
        {
            if (SelectedAssetVulnerability != null)
            {
                var viewModel = new AssetVulnerabilityDialogViewModel(SelectedAssetVulnerability);
                var addAssetVulnerabilityWindow = new AssetVulnerabilityDialogView(viewModel);
                addAssetVulnerabilityWindow.Title = "Update Vulnerability";
                if (addAssetVulnerabilityWindow.ShowDialog() == true)
                {
                    var updatedAssetVulnerability = viewModel.AssetVulnerability;

                    using (var scope = App.ServiceProvider.CreateScope())
                    {
                        var context = scope.ServiceProvider.GetRequiredService<AssetDbContext>();

                        SelectedAssetVulnerability.Probability = updatedAssetVulnerability.Probability;
                        SelectedAssetVulnerability.Impact = updatedAssetVulnerability.Impact;
                        SelectedAssetVulnerability.Action = updatedAssetVulnerability.Action;

                        context.AssetVulnerabilities.Update(SelectedAssetVulnerability);

                        await context.SaveChangesAsync();
                    }

                    int index = AssetVulnerabilities.IndexOf(SelectedAssetVulnerability);
                    AssetVulnerabilities.RemoveAt(index);
                    AssetVulnerabilities.Insert(index, updatedAssetVulnerability);
                    OnPropertyChanged(nameof(AssetVulnerabilities));
                }
            }
        }

        private bool CanDeleteAssetVulnerability()
        {
            return SelectedAssetVulnerability != null;
        }

        private async void DeleteVulnerability()
        {
            if (SelectedAssetVulnerability != null)
            {
                var result = MessageBox.Show($"Are you sure you want to delete the vulnerability '{SelectedAssetVulnerability.Asset.AssetName} - {SelectedAssetVulnerability.Vulnerability.Name}'?", "Confirm Deletion", MessageBoxButton.YesNo, MessageBoxImage.Warning);
                if (result == MessageBoxResult.Yes)
                {
                    using (var scope = App.ServiceProvider.CreateScope())
                    {
                        var context = scope.ServiceProvider.GetRequiredService<AssetDbContext>();

                        context.AssetVulnerabilities.Remove(SelectedAssetVulnerability);

                        await context.SaveChangesAsync();
                    }

                    var deletedAsset = SelectedAssetVulnerability;
                    int index = AssetVulnerabilities.IndexOf(SelectedAssetVulnerability);
                    AssetVulnerabilities.RemoveAt(index);
                    OnPropertyChanged(nameof(AssetVulnerabilities));
                }
            }
        }

        public void ShowColumnChartSelectionDialog()
        {
            var dialog = new Window
            {
                Title = "Select Chart Type",
                Width = 300,
                Height = 175,
                WindowStartupLocation = WindowStartupLocation.CenterScreen
            };

            var stackPanel = new StackPanel
            {
                Margin = new Thickness(10)
            };

            var assetCountPerVulnerability = new RadioButton
            {
                Content = "Asset Count Per Vulnerability",
                Margin = new Thickness(0, 0, 0, 10),
                IsChecked = true
            };

            var assetCountPerProbability = new RadioButton
            {
                Content = "Asset Count Per Probability",
                Margin = new Thickness(0, 0, 0, 10)
            };

            var assetCountPerImpact = new RadioButton
            {
                Content = "Asset Count Per Impact",
                Margin = new Thickness(0, 0, 0, 10)
            };

            stackPanel.Children.Add(assetCountPerVulnerability);
            stackPanel.Children.Add(assetCountPerProbability);
            stackPanel.Children.Add(assetCountPerImpact);

            var okButton = new Button
            {
                Content = "Generate",
                Width = 75,
                Height = 30,
                Margin = new Thickness(0, 10, 0, 0),
                HorizontalAlignment = System.Windows.HorizontalAlignment.Right
            };

            var cancelButton = new Button
            {
                Content = "Cancel",
                Width = 75,
                Height = 30,
                Margin = new Thickness(10, 10, 0, 0),
                HorizontalAlignment = System.Windows.HorizontalAlignment.Left
            };

            var buttonPanel = new StackPanel
            {
                Orientation = Orientation.Horizontal,
                HorizontalAlignment = System.Windows.HorizontalAlignment.Center
            };

            buttonPanel.Children.Add(okButton);
            buttonPanel.Children.Add(cancelButton);

            stackPanel.Children.Add(buttonPanel);

            dialog.Content = stackPanel;

            okButton.Click += (sender, e) =>
            {
                if (assetCountPerVulnerability.IsChecked == true)
                {
                    GenerateColumnChartAssetCountPerVulnerability();
                }
                else if (assetCountPerProbability.IsChecked == true)
                {
                    GenerateColumnChartAssetCountPerProbability();
                }
                else if (assetCountPerImpact.IsChecked == true)
                {
                    GenerateColumnChartAssetCountPerImpact();
                }
                dialog.DialogResult = true;
                dialog.Close();
            };

            cancelButton.Click += (sender, e) =>
            {
                dialog.DialogResult = false;
                dialog.Close();
            };

            dialog.ShowDialog();
        }

        public void ShowPiechartSelectionDialog()
        {
            var dialog = new Window
            {
                Title = "Select Chart Type",
                Width = 300,
                Height = 175,
                WindowStartupLocation = WindowStartupLocation.CenterScreen
            };

            var stackPanel = new StackPanel
            {
                Margin = new Thickness(10)
            };

            var assetDistributionByVulnerability = new RadioButton
            {
                Content = "Asset Distribution By Vulnerability",
                Margin = new Thickness(0, 0, 0, 10),
                IsChecked = true
            };

            var assetDistributionByProbability = new RadioButton
            {
                Content = "Asset Distribution By Probability",
                Margin = new Thickness(0, 0, 0, 10)
            };

            var assetDistributionByImpact = new RadioButton
            {
                Content = "Asset Distribution By Impact",
                Margin = new Thickness(0, 0, 0, 10)
            };

            stackPanel.Children.Add(assetDistributionByVulnerability);
            stackPanel.Children.Add(assetDistributionByProbability);
            stackPanel.Children.Add(assetDistributionByImpact);

            var okButton = new Button
            {
                Content = "Generate",
                Width = 75,
                Height = 30,
                Margin = new Thickness(0, 10, 0, 0),
                HorizontalAlignment = System.Windows.HorizontalAlignment.Right
            };

            var cancelButton = new Button
            {
                Content = "Cancel",
                Width = 75,
                Height = 30,
                Margin = new Thickness(10, 10, 0, 0),
                HorizontalAlignment = System.Windows.HorizontalAlignment.Left
            };

            var buttonPanel = new StackPanel
            {
                Orientation = Orientation.Horizontal,
                HorizontalAlignment = System.Windows.HorizontalAlignment.Center
            };

            buttonPanel.Children.Add(okButton);
            buttonPanel.Children.Add(cancelButton);

            stackPanel.Children.Add(buttonPanel);

            dialog.Content = stackPanel;

            okButton.Click += (sender, e) =>
            {
                if (assetDistributionByVulnerability.IsChecked == true)
                {
                    GeneratePiechartAssetDistributionByVulnerability();
                }
                else if (assetDistributionByProbability.IsChecked == true)
                {
                    GeneratePiechartAssetDistributionByProbability();
                }
                else if (assetDistributionByImpact.IsChecked == true)
                {
                    GeneratePiechartAssetDistributionByImpact();
                }
                dialog.DialogResult = true;
                dialog.Close();
            };

            cancelButton.Click += (sender, e) =>
            {
                dialog.DialogResult = false;
                dialog.Close();
            };

            dialog.ShowDialog();
        }

        public void GenerateColumnChartAssetCountPerVulnerability()
        {
            var barModel = new PlotModel { Title = "Asset Count Per Vulnerability" };

            ConcurrentDictionary<string, int> data = new ConcurrentDictionary<string, int>();
            foreach (var assetVulnerability in AssetVulnerabilities)
            {
                data.AddOrUpdate(assetVulnerability.Vulnerability.Name, 1, (key, oldValue) => oldValue + 1);
            }

            var sortedData = data.OrderByDescending(kvp => kvp.Value).ToList();

            var categoryAxis = new CategoryAxis
            {
                Position = AxisPosition.Bottom,
                Key = "CategoryAxis"
            };

            foreach (var kvp in sortedData)
            {
                categoryAxis.Labels.Add(kvp.Key);
            }

            var valueAxis = new LinearAxis
            {
                Position = AxisPosition.Left,
                Key = "ValueAxis",
                Minimum = 0,
                Title = "Values",
                MajorStep = 1
            };

            barModel.Axes.Add(categoryAxis);
            barModel.Axes.Add(valueAxis);

            var barSeries = new BarSeries
            {
                ItemsSource = sortedData.Select(kvp => new BarItem { Value = kvp.Value }).ToList(),
                LabelPlacement = LabelPlacement.Inside,
                LabelFormatString = "{0}",
                XAxisKey = "ValueAxis",
                YAxisKey = "CategoryAxis"
            };

            barModel.Series.Add(barSeries);

            _chartExportService.ExportColumnChart(barModel);
        }

        public void GenerateColumnChartAssetCountPerProbability()
        {
            var barModel = new PlotModel { Title = "Asset Count Per Probability" };

            ConcurrentDictionary<string, int> data = new ConcurrentDictionary<string, int>();
            foreach (var assetVulnerability in AssetVulnerabilities)
            {
                data.AddOrUpdate(assetVulnerability.Probability.ToString(), 1, (key, oldValue) => oldValue + 1);
            }

            var sortedData = data.OrderBy(kvp => int.Parse(kvp.Key)).ToList();

            var categoryAxis = new CategoryAxis
            {
                Position = AxisPosition.Bottom,
                Key = "CategoryAxis"
            };

            foreach (var kvp in sortedData)
            {
                categoryAxis.Labels.Add(kvp.Key);
            }

            var valueAxis = new LinearAxis
            {
                Position = AxisPosition.Left,
                Key = "ValueAxis",
                Minimum = 0,
                Title = "Values",
                MajorStep = 1
            };

            barModel.Axes.Add(categoryAxis);
            barModel.Axes.Add(valueAxis);

            var barSeries = new BarSeries
            {
                LabelPlacement = LabelPlacement.Inside,
                LabelFormatString = "{0}",
                XAxisKey = "ValueAxis",
                YAxisKey = "CategoryAxis"
            };

            foreach (var kvp in sortedData)
            {
                var barItem = new BarItem { Value = kvp.Value };
                barItem.Color = GetColorForValue(int.Parse(kvp.Key));
                barSeries.Items.Add(barItem);
            }

            barModel.Series.Add(barSeries);

            _chartExportService.ExportColumnChart(barModel);
        }

        public void GenerateColumnChartAssetCountPerImpact()
        {
            var barModel = new PlotModel { Title = "Asset Count Per Impact" };

            ConcurrentDictionary<string, int> data = new ConcurrentDictionary<string, int>();
            foreach (var assetVulnerability in AssetVulnerabilities)
            {
                data.AddOrUpdate(assetVulnerability.Impact.ToString(), 1, (key, oldValue) => oldValue + 1);
            }

            var sortedData = data.OrderBy(kvp => int.Parse(kvp.Key)).ToList();

            var categoryAxis = new CategoryAxis
            {
                Position = AxisPosition.Bottom,
                Key = "CategoryAxis"
            };

            foreach (var kvp in sortedData)
            {
                categoryAxis.Labels.Add(kvp.Key);
            }

            var valueAxis = new LinearAxis
            {
                Position = AxisPosition.Left,
                Key = "ValueAxis",
                Minimum = 0,
                Title = "Values",
                MajorStep = 1
            };

            barModel.Axes.Add(categoryAxis);
            barModel.Axes.Add(valueAxis);

            var barSeries = new BarSeries
            {
                LabelPlacement = LabelPlacement.Inside,
                LabelFormatString = "{0}",
                XAxisKey = "ValueAxis",
                YAxisKey = "CategoryAxis"
            };

            foreach (var kvp in sortedData)
            {
                var barItem = new BarItem { Value = kvp.Value };
                barItem.Color = GetColorForValue(int.Parse(kvp.Key));
                barSeries.Items.Add(barItem);
            }

            barModel.Series.Add(barSeries);

            _chartExportService.ExportColumnChart(barModel);
        }

        public void GeneratePiechartAssetDistributionByVulnerability()
        {
            var pieModel = new PlotModel { Title = "Asset Distribution By Vulnerability" };

            ConcurrentDictionary<string, int> data = new ConcurrentDictionary<string, int>();
            foreach (var assetVulnerability in AssetVulnerabilities)
            {
                data.AddOrUpdate(assetVulnerability.Vulnerability.Name, 1, (key, oldValue) => oldValue + 1);
            }

            int totalVulnerabilities = data.Values.Sum();

            var pieSeries = new PieSeries
            {
                StrokeThickness = 2.0,
                InsideLabelPosition = 0.8,
                AngleSpan = 360,
                StartAngle = 0,
                InsideLabelFormat = "{1} ({0:F1}%)"
            };

            foreach (var kvp in data)
            {
                double percentage = (double)kvp.Value / totalVulnerabilities * 100;
                pieSeries.Slices.Add(new PieSlice(kvp.Key, percentage));
            }

            pieModel.Series.Add(pieSeries);

            _chartExportService.ExportPiechart(pieModel);
        }

        public void GeneratePiechartAssetDistributionByProbability()
        {
            var pieModel = new PlotModel { Title = "Asset Distribution By Probability" };

            ConcurrentDictionary<string, int> data = new ConcurrentDictionary<string, int>();
            foreach (var assetVulnerability in AssetVulnerabilities)
            {
                data.AddOrUpdate(assetVulnerability.Probability.ToString(), 1, (key, oldValue) => oldValue + 1);
            }

            int totalVulnerabilities = data.Values.Sum();

            var pieSeries = new PieSeries
            {
                StrokeThickness = 2.0,
                InsideLabelPosition = 0.8,
                AngleSpan = 360,
                StartAngle = 0,
                InsideLabelFormat = "{1} ({0:F1}%)"
            };

            foreach (var kvp in data.OrderBy(kvp => int.Parse(kvp.Key)))
            {
                double percentage = (double)kvp.Value / totalVulnerabilities * 100;
                var pieSlice = new PieSlice(kvp.Key, percentage)
                {
                    Fill = GetColorForValue(int.Parse(kvp.Key))
                };
                pieSeries.Slices.Add(pieSlice);
            }

            pieModel.Series.Add(pieSeries);

            _chartExportService.ExportPiechart(pieModel);
        }

        public void GeneratePiechartAssetDistributionByImpact()
        {
            var pieModel = new PlotModel { Title = "Asset Distribution By Impact" };

            ConcurrentDictionary<string, int> data = new ConcurrentDictionary<string, int>();
            foreach (var assetVulnerability in AssetVulnerabilities)
            {
                data.AddOrUpdate(assetVulnerability.Impact.ToString(), 1, (key, oldValue) => oldValue + 1);
            }

            int totalVulnerabilities = data.Values.Sum();

            var pieSeries = new PieSeries
            {
                StrokeThickness = 2.0,
                InsideLabelPosition = 0.8,
                AngleSpan = 360,
                StartAngle = 0,
                InsideLabelFormat = "{1} ({0:F1}%)"
            };

            foreach (var kvp in data.OrderBy(kvp => int.Parse(kvp.Key)))
            {
                double percentage = (double)kvp.Value / totalVulnerabilities * 100;
                var pieSlice = new PieSlice(kvp.Key, percentage)
                {
                    Fill = GetColorForValue(int.Parse(kvp.Key))
                };
                pieSeries.Slices.Add(pieSlice);
            }

            pieModel.Series.Add(pieSeries);

            _chartExportService.ExportPiechart(pieModel);
        }

        private OxyColor GetColorForValue(int value)
        {
            switch (value)
            {
                case 1: return OxyColors.Green;
                case 2: return OxyColors.YellowGreen;
                case 3: return OxyColors.Yellow;
                case 4: return OxyColors.Orange;
                case 5: return OxyColors.Red;
                default: return OxyColors.Gray;
            }
        }
    }
}
