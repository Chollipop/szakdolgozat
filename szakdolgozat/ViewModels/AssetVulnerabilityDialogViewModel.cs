using Microsoft.Extensions.DependencyInjection;
using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using szakdolgozat.Models;

namespace szakdolgozat.ViewModels
{
    public class AssetVulnerabilityDialogViewModel : BaseViewModel
    {
        private AssetVulnerability _assetVulnerability;

        private Brush _probabilityBorderBrush = Brushes.Gray;
        private Brush _impactBorderBrush = Brushes.Gray;
        private bool _isInputValid;
        private bool _isUpdating;
        private string _probabilityText;
        private string _impactText;

        public ObservableCollection<Asset> Assets { get; set; }
        public ObservableCollection<Vulnerability> Vulnerabilities { get; set; }

        public AssetVulnerability AssetVulnerability
        {
            get => _assetVulnerability;
            set
            {
                _assetVulnerability = value;
                OnPropertyChanged(nameof(AssetVulnerability));
            }
        }

        public Asset Asset
        {
            get => _assetVulnerability.Asset;
            set
            {
                _assetVulnerability.Asset = value;
                OnPropertyChanged(nameof(Asset));
            }
        }

        public Vulnerability Vulnerability
        {
            get => _assetVulnerability.Vulnerability;
            set
            {
                _assetVulnerability.Vulnerability = value;
                OnPropertyChanged(nameof(Vulnerability));
            }
        }

        public int? Probability
        {
            get => _assetVulnerability.Probability;
        }

        public int? Impact
        {
            get => _assetVulnerability.Impact;
        }

        public string Action
        {
            get => _assetVulnerability.Action;
            set
            {
                _assetVulnerability.Action = value;
                OnPropertyChanged(nameof(Action));
            }
        }

        public Brush ProbabilityBorderBrush
        {
            get => _probabilityBorderBrush;
            private set
            {
                if (_probabilityBorderBrush != value)
                {
                    _probabilityBorderBrush = value;
                    OnPropertyChanged(nameof(ProbabilityBorderBrush));
                }
            }
        }

        public Brush ImpactBorderBrush
        {
            get => _impactBorderBrush;
            private set
            {
                if (_impactBorderBrush != value)
                {
                    _impactBorderBrush = value;
                    OnPropertyChanged(nameof(ImpactBorderBrush));
                }
            }
        }

        public bool IsInputValid
        {
            get => _isInputValid;
            set
            {
                _isInputValid = value && IsAssetVulnerabilityUnique(SelectedAsset.AssetID, SelectedVulnerability.ID);
                OnPropertyChanged(nameof(IsInputValid));
            }
        }

        public bool IsUpdating
        {
            get => _isUpdating;
            set
            {
                _isUpdating = value;
                OnPropertyChanged(nameof(IsUpdating));
            }
        }

        public string ProbabilityText
        {
            get => _probabilityText;
            set
            {
                _probabilityText = value;
                if (int.TryParse(value, out int parsedValue) && parsedValue >= 1 && parsedValue <= 5)
                {
                    IsInputValid = true;
                    _assetVulnerability.Probability = parsedValue;
                    ProbabilityBorderBrush = Brushes.Gray;
                }
                else
                {
                    IsInputValid = false;
                    _assetVulnerability.Probability = null;
                    ProbabilityBorderBrush = Brushes.Red;
                }
                OnPropertyChanged(nameof(ProbabilityText));
                OnPropertyChanged(nameof(Probability));
                OnPropertyChanged(nameof(IsInputValid));
                OnPropertyChanged(nameof(ProbabilityBorderBrush));
            }
        }

        public string ImpactText
        {
            get => _impactText;
            set
            {
                _impactText = value;
                if (int.TryParse(value, out int parsedValue) && parsedValue >= 1 && parsedValue <= 5)
                {
                    IsInputValid = true;
                    _assetVulnerability.Impact = parsedValue;
                    ImpactBorderBrush = Brushes.Gray;
                }
                else
                {
                    IsInputValid = false;
                    _assetVulnerability.Impact = null;
                    ImpactBorderBrush = Brushes.Red;
                }
                OnPropertyChanged(nameof(ImpactText));
                OnPropertyChanged(nameof(Impact));
                OnPropertyChanged(nameof(IsInputValid));
                OnPropertyChanged(nameof(ImpactBorderBrush));
            }
        }

        public Asset SelectedAsset
        {
            get => Assets.FirstOrDefault(a => a == _assetVulnerability.Asset);
            set
            {
                _assetVulnerability.Asset = value;
                OnPropertyChanged(nameof(SelectedAsset));

                if (SelectedVulnerability != null)
                {
                    IsInputValid = IsAssetVulnerabilityUnique(value.AssetID, SelectedVulnerability.ID);
                    OnPropertyChanged(nameof(IsInputValid));
                }
            }
        }

        public Vulnerability SelectedVulnerability
        {
            get => Vulnerabilities.FirstOrDefault(v => v == _assetVulnerability.Vulnerability);
            set
            {
                _assetVulnerability.Vulnerability = value;
                OnPropertyChanged(nameof(SelectedVulnerability));

                if (SelectedAsset != null)
                {
                    IsInputValid = IsAssetVulnerabilityUnique(SelectedAsset.AssetID, value.ID);
                    OnPropertyChanged(nameof(IsInputValid));
                }
            }
        }

        public ICommand SubmitCommand { get; }
        public ICommand CancelCommand { get; }

        public AssetVulnerabilityDialogViewModel(AssetVulnerability assetVulnerability = null)
        {
            IsUpdating = assetVulnerability == null;
            _assetVulnerability = assetVulnerability ?? new AssetVulnerability();
            Assets = new ObservableCollection<Asset>(GetAllAssets());
            Vulnerabilities = new ObservableCollection<Vulnerability>(GetAllVulnerabilities());

            if (_assetVulnerability.Asset != null)
            {
                SelectedAsset = Assets.Where(a => a.AssetID == _assetVulnerability.Asset.AssetID).First();
            }
            else if (Assets.Any())
            {
                SelectedAsset = Assets.First();
            }

            if (_assetVulnerability.Vulnerability != null)
            {
                SelectedVulnerability = Vulnerabilities.Where(v => v.ID == _assetVulnerability.Vulnerability.ID).First();
            }
            else if (Vulnerabilities.Any())
            {
                SelectedVulnerability = Vulnerabilities.First();
            }

            if (_assetVulnerability.Probability != null)
            {
                ProbabilityText = _assetVulnerability.Probability.ToString();
            }

            if (_assetVulnerability.Impact != null)
            {
                ImpactText = _assetVulnerability.Impact.ToString();
            }

            SubmitCommand = new RelayCommand(Submit);
            CancelCommand = new RelayCommand(Cancel);
        }

        private void Submit()
        {
            var window = Application.Current.Windows.OfType<Window>().SingleOrDefault(w => w.IsActive);
            if (window != null)
            {
                window.DialogResult = true;
                window.Close();
            }
        }

        private void Cancel()
        {
            var window = Application.Current.Windows.OfType<Window>().SingleOrDefault(w => w.IsActive);
            if (window != null)
            {
                window.DialogResult = false;
                window.Close();
            }
        }

        private IEnumerable<Asset> GetAllAssets()
        {
            using (var scope = App.ServiceProvider.CreateScope())
            {
                var context = scope.ServiceProvider.GetRequiredService<AssetDbContext>();
                return context.Assets.Where(a => a.Status == "Active").ToList();
            }
        }

        private IEnumerable<Vulnerability> GetAllVulnerabilities()
        {
            using (var scope = App.ServiceProvider.CreateScope())
            {
                var context = scope.ServiceProvider.GetRequiredService<AssetDbContext>();
                return context.Vulnerabilities.ToList();
            }
        }

        private bool IsAssetVulnerabilityUnique(int assetId, int vulnerabilityId)
        {
            if (!IsUpdating)
            {
                return true;
            }

            using (var scope = App.ServiceProvider.CreateScope())
            {
                var context = scope.ServiceProvider.GetRequiredService<AssetDbContext>();
                return !context.AssetVulnerabilities.Any(av => av.Asset.AssetID == assetId && av.Vulnerability.ID == vulnerabilityId);
            }
        }
    }
}
